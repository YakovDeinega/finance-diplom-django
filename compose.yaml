# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
version: '3.8'

services:
  nginx:
    build: ./nginx
    ports:
      - "80:80"
    depends_on:
      - server
      - fastapi
    volumes:
      - ./staticfiles:/app/staticfiles:ro
      - ./media:/app/media:ro
    extra_hosts:
      - "django.localhost:127.0.0.1"
      - "fastapi.localhost:127.0.0.1"
    networks:
      - backend

  server:
    build:
      context: .
    env_file:
      - .env
    environment:
      POSTGRES_NAME: ${POSTGRES_DB:-finance_db}
      POSTGRES_USER: ${POSTGRES_USER:-finance_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finance_pass}
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    volumes:
      - .:/app
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    expose:
      - "8080"
    extra_hosts:
      - "django.localhost:127.0.0.1"
    depends_on:
      - redis
      - db
    networks:
      - backend
    command: sh -c "python manage.py collectstatic --noinput && gunicorn finance.wsgi:application --bind 0.0.0.0:8080 --workers 4"

  fastapi:
    build:
      context: ../fastapi
      dockerfile: Dockerfile
    env_file:
      - .env
    volumes:
      - ../fastapi:/app
    expose:
      - "8000"
    extra_hosts:
      - "fastapi.localhost:127.0.0.1"
    networks:
      - backend

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - backend

  db:
    image: postgres:17-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-finance_db}
      POSTGRES_USER: ${POSTGRES_USER:-finance_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-finance_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-finance_user} -d ${POSTGRES_DB:-finance_db}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend

networks:
  backend:
    driver: bridge
    name: app_network

volumes:
  static_volume:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./staticfiles
  redis_data:
  postgres_data:


